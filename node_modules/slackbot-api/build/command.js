'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var map = {
  _: '.*?'
};

var types = {
  string: '.',
  number: '\\d',
  alphanumeric: '[A-Za-z0-9]',
  alphabet: '[A-Za-z]',
  word: '\\w',
  char: '\\S'
};

exports.types = types;
var group = function group(string) {
  var groups = /\((.*?)\)/g;

  return string.replace(groups, function (a, inside) {
    return '(?:' + inside + ')';
  });
};

var optional = function optional(string) {
  var parameters = /(\[(.*?)\])/g;

  return string.replace(parameters, function (a, b, type) {
    return '(' + (types[type] || type) + '*)';
  });
};

var required = function required(string) {
  var parameters = /(<(.*?)>)/g;

  return string.replace(parameters, function (a, b, type) {
    return '(' + (types[type] || type) + '+)';
  });
};

var space = function space(string) {
  var spaces = /\s/g;

  return string.replace(spaces, '\\s*');
};

var transformers = [group, optional, required, space];

exports['default'] = function (bot) {
  bot.command = function (string, listener) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (!listener) {
      listener = string;
      string = '_';
    }

    var keys = Object.keys(map);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var key = _step.value;

        var value = map[key];
        var r = new RegExp(key, 'g');

        string = string.replace(r, value);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    string = transformers.reduce(function (str, transformer) {
      return transformer(str);
    }, string);

    var regex = new RegExp(string, 'igm');

    return bot.listen.apply(bot, [regex, listener].concat(args));
  };
};
