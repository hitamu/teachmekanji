'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x11, _x12, _x13) { var _again = true; _function: while (_again) { var object = _x11, property = _x12, receiver = _x13; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x11 = parent; _x12 = property; _x13 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULTS = {
  mrkdwn_in: ['text']
};

var Attachments = (function (_Array) {
  _inherits(Attachments, _Array);

  function Attachments() {
    var defaults = arguments.length <= 0 || arguments[0] === undefined ? DEFAULTS : arguments[0];

    _classCallCheck(this, Attachments);

    _get(Object.getPrototypeOf(Attachments.prototype), 'constructor', this).call(this);
    this.defaults = defaults;

    this.or = [];
  }

  /* istanbul ignore next */

  _createClass(Attachments, [{
    key: 'good',
    value: function good(text) {
      var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      return this.add(_extends({
        text: text, color: 'good',
        fallback: 'Good: ' + text
      }, props));
    }
  }, {
    key: 'goodOr',
    value: function goodOr(text) {
      var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      this.good(text, props);
      this.or.push(this.length - 1);

      return this;
    }

    /* istanbul ignore next */
  }, {
    key: 'danger',
    value: function danger(text) {
      var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      return this.add(_extends({
        text: text, color: 'danger',
        fallback: 'Danger: ' + text
      }, props));
    }

    /* istanbul ignore next */
  }, {
    key: 'warning',
    value: function warning(text) {
      var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      return this.add(_extends({
        text: text, color: 'warning',
        fallback: 'Warning: ' + text
      }, props));
    }

    /* istanbul ignore next */
  }, {
    key: 'image',
    value: function image(url) {
      var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      return this.add(_extends({
        image_url: url,
        fallback: 'Image: ' + url
      }, props));
    }

    /* istanbul ignore next */
  }, {
    key: 'thumb',
    value: function thumb(url) {
      var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      return this.add(_extends({
        thumb_url: url,
        fallback: 'Thumbnial: ' + url
      }, props));
    }

    /* istanbul ignore next */
  }, {
    key: 'author',
    value: function author(name, link, icon) {
      var props = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

      return this.add(_extends({
        author_name: name,
        author_link: link,
        author_icon: icon,
        fallback: 'Author: ' + name + ', ' + link + ', ' + icon
      }, props));
    }

    /* istanbul ignore next */
  }, {
    key: 'title',
    value: function title(_title, link) {
      var props = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      return this.add(_extends({
        title: _title, title_link: link,
        fallback: 'Title: ' + _title + ', ' + link
      }, props));
    }

    /* istanbul ignore next */
  }, {
    key: 'fields',
    value: function fields(list) {
      var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      return this.add(_extends({
        fields: list
      }, props));
    }
  }, {
    key: 'add',
    value: function add(props) {
      var _this = this;

      this.or.forEach(function (i) {
        return _this.splice(i, 1);
      });
      this.push(_extends({}, this.defaults, props));

      return this;
    }
  }]);

  return Attachments;
})(Array);

exports['default'] = Attachments;
module.exports = exports['default'];
